"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-(7zq7$u*hz^!i!%h*l=jl!y)+!t)!dlc8te2%ew^_cmq@$s9xa'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'accounts',
    'api',
    'corsheaders',
]
SIMPLE_JWT = {
    # Set the access token lifetime to 15 minutes
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),

    # Set the refresh token lifetime to 30 days
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),

    # Allow token refreshing only if the access token has not expired yet
    'ROTATE_REFRESH_TOKENS': False,

    # Sliding token refresh - if set to True, will refresh the access token
    # every time it is used. For e-commerce sites, this might not be ideal
    # as users might have long browsing sessions.
    'SLIDING_TOKEN_REFRESH': False,

    # To mitigate the risk of stolen refresh tokens, enable this setting to
    # require a new refresh token for every refresh request.
    'ALWAYS_ROTATE_REFRESH_TOKEN': True,

    # Allow the use of the "Token" authentication header
    'AUTH_HEADER_TYPES': ('Bearer',),

    # Configure the authentication class used for obtaining an access token.
    # 'Token' authentication is recommended as it is simpler and stateless.
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.authentication.TokenAuthentication',),

    # Enable the "AUTH_COOKIE" setting to use a secure HTTP-only cookie for
    # storing the access token. This helps protect against CSRF attacks.
    'AUTH_COOKIE': 'access_token',

    # Set the secure flag for the access token cookie to True if your site is
    # served over HTTPS.
    'AUTH_COOKIE_SECURE': False,

    # Use HttpOnly flag on the access token cookie to prevent client-side
    # JavaScript from accessing the cookie, mitigating XSS attacks.
    'AUTH_COOKIE_HTTP_ONLY': True,

    # Set the same-site attribute on the access token cookie to 'Lax' or 'Strict'
    # to prevent CSRF attacks through cookies.
    'AUTH_COOKIE_SAMESITE': 'Lax',

    # Configure the name of the refresh token cookie, if you are using cookies
    'AUTH_REFRESH_COOKIE': 'refresh_token',

    # Set the secure flag for the refresh token cookie to True if your site is
    # served over HTTPS.
    'AUTH_REFRESH_COOKIE_SECURE': False,

    # Use HttpOnly flag on the refresh token cookie to prevent client-side
    # JavaScript from accessing the cookie, mitigating XSS attacks.
    'AUTH_REFRESH_COOKIE_HTTP_ONLY': True,

    # Set the same-site attribute on the refresh token cookie to 'Lax' or 'Strict'
    # to prevent CSRF attacks through cookies.
    'AUTH_REFRESH_COOKIE_SAMESITE': 'Lax',
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100 ,
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

#Cors
CORS_ALLOW_ALL_ORIGINS = True

#User account
AUTH_USER_MODEL = 'accounts.CustomUser'
AUTHENTICATION_BACKENDS = ['accounts.auth_backends.EmailBackend']

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
